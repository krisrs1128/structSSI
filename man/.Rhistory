q()
n
library('structSSI')
search()
search()
library('graph')
library('structSSI')
getwd()
setwd('h0a/kriss1/private/structSSI')
setwd('/h0a/kriss1/private/structSSI')
install.packages('structSSI_1.0.5.tar.gz', repos = NULL)
install.packages('structSSI1.0.5.tar.gz', repos = NULL)
install.packages('structSSI_1.0.5.tar.gz', repos = NULL)
getwd()
setwd('/h0a/kriss1/private/')
install.packages('structSSI_1.0.5.tar.gz', repos = NULL)
library('structSSI')
plotUnadjustedHypothesesTree(hyp.tree)
plot(hyp.tree, p.values.type = 'unadjusted')
slotNames(hyp.tree)
graph.adjacency(hyp.tree@tree)
igraph.to.graphNEL(graph.adjacency(hyp.tree@tree))
library('structSSI')
hyp.tree
hyp.tree@tree
hyp.tree
tree.to.plot
alpha = 0.05
n.sig.classes
nodeNames
p.values.type = 'unadjusted'
plot(hyp.tree)
promptData("../data/gtemp.txt")
gtemp <- read.table(../data/gtemp.txt)
gtemp <- read.table('../data/gtemp.txt')
promptData(gtemp)
getwd()
gtemp
plot(gtemp)
plot(gtemp, lty = 1)
plot(gtemp, type = 'l')
library('structSSI')
example(hFDR.adjust)
hyp.tree@adj.p.values
hyp.tree@unadj.p.values
hyp.tree@hypotheses.names
tree
example(hFDR.adjust)
hyp.tree
hyp.tree
tree
tree
root(tree)
graph.tree(hyp.tree@tree)
root(graph.tree(hyp.tree@tree))
g <- graph.tree(hyp.tree@tree)
g
str(tree)
g
str(g)
g[1]
summary(g)
names(g)
V(g)
E(g)
g
children(g)
plot(g)
g
tree
plot(tree)
V(tree)
str(tree)
parent(tree)
example(Adaptive.GBH)
hyp.tree
example(Adaptive.GBH)
hyp.tree
E(tree)
E(tree)
E(tree)[, 2]
E(tree)
as.matrix(E(tree))
as.matrix(V(tree))
V(tree)
get.edgelist(tree, names = F)
get.edgelist(tree)
get.edgelist(tree, names = F)
which(edgelist[, 1] %in% edgelist[, 2])
which(edgelist[, 1] %in% edgelist[, 2])
which(edgelist[, 1] %in% edgelist[, 2])
which(!(edgelist[, 1] %in% edgelist[, 2]))
E(tree)[which(!(edgelist[, 1] %in% edgelist[, 2]))]
V(tree)[which(!(edgelist[, 1] %in% edgelist[, 2]))]
E(tree)[which(!(edgelist[, 1] %in% edgelist[, 2]))][, 1]
E(tree)[which(!(edgelist[, 1] %in% edgelist[, 2])), 1]
E(tree)[which(!(edgelist[, 1] %in% edgelist[, 2])), 1]
E(tree)
E(tree)[which(!(edgelist[, 1] %in% edgelist[, 2]))]
edgelist[which(!(edgelist[, 1] %in% edgelist[, 2])), 1]
edgelist[which(!(edgelist[, 1] %in% edgelist[, 2])), 1]    root.position.in.edgelist <- which(edgelist[,1] == 1)
    root.position.in.edgelist <- which(edgelist[,1] == 1)
root.position.in.edgelist
ROOT
root
V(tree)[root]
hyp.tree
unadjp
hyp.ree
hyp.tree
unadj.pl
unadj.p.values
unadjp <- unadj.p.values
unadjp
names(unadjp) <- hypotheses.names
unadjp
as.data.frame(unadjp)
rownames(unadjp)
unadjp
unadjp <- as.data.frame(unadjp)
unadjp
rownames(unadjp)
colnames(unadjp)
hypothesesTree(unadjp)
new('hypothesesTree', p.vals = unadjp)
new('hypothesesTree', p.vals = unadjp)
setClass("hypothesesTree", representation = list(tree = "matrix",
                           p.vals = "data.frame"))

new('hypothesesTree', p.vals = unadjp)
new('hypothesesTree', p.vals = unadjp)
new('hypothesesTree', p.vals = unadjp)
hyp.tree
new('hypothesesTree', p.vals = unadjp)
hyp.tree
new('hypothesesTree', p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
tree
tree <- hyp.tree@tree
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
hyp.tree <- new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
hyp.tree
tree
V(tree)
V(tree)$hyp.names
V(tree)
V(tree)$hyp.names
unadjp
rownames(unadjp) <- NULL
unadjp
V(tree)$hyp.names
hyp.tree <- new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
hyp.tree <- new('hypothesesTree', tree = hyp.tree@tree, p.vals = unadjp, alpha = 0.05)
hyp.tree
V(tree)$hypnames
V(tree)$hyp.names
names(unadjp) <- hypotheses.names
unadjp
rownames(unadjp) <- hypotheses.names
hyp.tree <- new('hypothesesTree', tree = hyp.tree@tree, p.vals = unadjp, alpha = 0.05)
alpha = 0.05
children.p.vals
hyp.tree@p.vals
plot(tree)
plot(tree)
children.p.vals
children
root.position.in.edgelist
edgelist
tree
names(tree)
E(tree)
V(tree)
V(tree)
hyp.tree@tree
rownames(hyp.tree@tree)[21, ]
rownames(hyp.tree@tree)[21]
library('multtest')
adjp.index
adjp
rejected
rejected.children
adjusted.p.values
rejected
new("hypothesesTree")
rejected
children
adjusted.p.values
adjusted.p.values
child <- rejected[1]
 child
p.vals
hyp.tree@p.vals
subcomp
subtree@tree
children
subtree@tree
V(subtree)
V(subtree.igraph)
subcomp
hyp.tree@p.vals[subcomp, ]
hyp.tree@p.vals
V(subtree.igraph)$p.vals
p.vals
subttree.igraph
subtree.igraph
V(subtree.igraph)
V(subtree.igraph)$hyp.names
V(subtree.igraph)$p.vals
V(subtree.igraph)$pvals
V(tree)$p.vals
V(subtree.igraph)$p.vals
subtree@p.vals
subtree@p.vals
subtree@p.vals
subtree
subtree
SignificanceStars
object <- subtree
subtree
p.vals
tree
ncol(p.vals)
p.vals[, 1]
alpha
rejected.hyp
subtree
hyp.tree
rejected
child <- rejected[1]
subtree
subtree@tree
subtree@p.vals
subtree@alpha
subtree
slots(subtree)
str(subtree)
alpha <- 0.05
subtree@alpha
subtree
adjusted.p.values
unadjp
unadjp <- as.vector(unadjp)
unadjp
str(unadjp)
unadjp <- as.vector(unadjp$unadjp)
unadjp
names(unadjp)
names(unadjp) <- paste("Hyp", 1:49)
unadjp
    p.vals <- data.frame(unadjp,
                         adj.significance = SignificanceStars(unadjp))
unadjp
p.vals
head(p.vals)
p.vals
tree <- hyp.tree@tree
tree
hyp.tree
tree
unadjp
tree
hyp.tree
hyp.tree
adjust
children.p.vals
hyp.tree@p.vals[children, 'unadjp']
hyp.tree@pvals[children, ]
hyp.tree@p.vals[children, ]
hyp.tree@p.vals[children, ]
rejected
rejected
edgelist
edgelist
root
root
root
edgelist
root
children
root
root
children
colnames(edgelist)
parent
which(edgelist$parent == root)
edgelist$parent
edgelist
colnames(edgelist)
edgelist$parent
root
children
head(edgelist)
edgelist
edgelist
edgelist
edgelist
children
        children.p.vals <- hyp.tree@p.vals[children, 'unadjp']
children.p.vals
hyp.tree@p.vals
edgelist
children
children.p.vals
children
children
children.p.vals
children
children.p.vals
adjust
rejected
rejected
rejected
child <- rejected[1]
child
subcomp
subtree
subtree.igraph
subtree@tree
children
V(tree)$hyp.names %in% children
rejected
V(subtree.igraph)
V(subtree.igraph)$hyp.names
hyp.tree@p.vals[V(subtree.igraph), ]
hyp.tree@p.vals
hFDR.internal(hyp.tree)
hyp.tree
tree <- hyp.tree@tree
tree
rejected
alpha
children
hyp.tree@p.vals
children
children.p.vals
rejected
children.p.vals$adjp
children.p.vals
rejected
rejected
child <- rejected[1]
subtree@p.vals
hyp.tree@p.vals
subtree
hyp.tree <- subtree
subtree
tree
rejected
subcomp
subtree@p.vals
tree
hyp.tree
subtree
tree
subtree
tree
subtree
child
subtree@p.vals
hyp.tree
tree <- hyp.tree@tree
tree
unadjp
tree <- as.matrix(get.adjacency(as.igraph(rtree(25)), sparse = FALSE))
tree
tree
hFDR.internal(hyp.tree)
hFDR.internal(hyp.tree)
hFDR.internal(hyp.tree)
hFDR.internal(hyp.tree)
subtree
subtree.igraph
