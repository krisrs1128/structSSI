root.position.in.edgelist
ROOT
root
V(tree)[root]
hyp.tree
unadjp
hyp.ree
hyp.tree
unadj.pl
unadj.p.values
unadjp <- unadj.p.values
unadjp
names(unadjp) <- hypotheses.names
unadjp
as.data.frame(unadjp)
rownames(unadjp)
unadjp
unadjp <- as.data.frame(unadjp)
unadjp
rownames(unadjp)
colnames(unadjp)
hypothesesTree(unadjp)
new('hypothesesTree', p.vals = unadjp)
new('hypothesesTree', p.vals = unadjp)
setClass("hypothesesTree", representation = list(tree = "matrix",
                           p.vals = "data.frame"))

new('hypothesesTree', p.vals = unadjp)
new('hypothesesTree', p.vals = unadjp)
new('hypothesesTree', p.vals = unadjp)
hyp.tree
new('hypothesesTree', p.vals = unadjp)
hyp.tree
new('hypothesesTree', p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
tree
tree <- hyp.tree@tree
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
hyp.tree <- new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
hyp.tree
tree
V(tree)
V(tree)$hyp.names
V(tree)
V(tree)$hyp.names
unadjp
rownames(unadjp) <- NULL
unadjp
V(tree)$hyp.names
hyp.tree <- new('hypothesesTree', tree = tree, p.vals = unadjp, alpha = 0.05)
hyp.tree <- new('hypothesesTree', tree = hyp.tree@tree, p.vals = unadjp, alpha = 0.05)
hyp.tree
V(tree)$hypnames
V(tree)$hyp.names
names(unadjp) <- hypotheses.names
unadjp
rownames(unadjp) <- hypotheses.names
hyp.tree <- new('hypothesesTree', tree = hyp.tree@tree, p.vals = unadjp, alpha = 0.05)
alpha = 0.05
children.p.vals
hyp.tree@p.vals
plot(tree)
plot(tree)
children.p.vals
children
root.position.in.edgelist
edgelist
tree
names(tree)
E(tree)
V(tree)
V(tree)
hyp.tree@tree
rownames(hyp.tree@tree)[21, ]
rownames(hyp.tree@tree)[21]
library('multtest')
adjp.index
adjp
rejected
rejected.children
adjusted.p.values
rejected
new("hypothesesTree")
rejected
children
adjusted.p.values
adjusted.p.values
child <- rejected[1]
 child
p.vals
hyp.tree@p.vals
subcomp
subtree@tree
children
subtree@tree
V(subtree)
V(subtree.igraph)
subcomp
hyp.tree@p.vals[subcomp, ]
hyp.tree@p.vals
V(subtree.igraph)$p.vals
p.vals
subttree.igraph
subtree.igraph
V(subtree.igraph)
V(subtree.igraph)$hyp.names
V(subtree.igraph)$p.vals
V(subtree.igraph)$pvals
V(tree)$p.vals
V(subtree.igraph)$p.vals
subtree@p.vals
subtree@p.vals
subtree@p.vals
subtree
subtree
SignificanceStars
object <- subtree
subtree
p.vals
tree
ncol(p.vals)
p.vals[, 1]
alpha
rejected.hyp
subtree
hyp.tree
rejected
child <- rejected[1]
subtree
subtree@tree
subtree@p.vals
subtree@alpha
subtree
slots(subtree)
str(subtree)
alpha <- 0.05
subtree@alpha
subtree
adjusted.p.values
unadjp
unadjp <- as.vector(unadjp)
unadjp
str(unadjp)
unadjp <- as.vector(unadjp$unadjp)
unadjp
names(unadjp)
names(unadjp) <- paste("Hyp", 1:49)
unadjp
    p.vals <- data.frame(unadjp,
                         adj.significance = SignificanceStars(unadjp))
unadjp
p.vals
head(p.vals)
p.vals
tree <- hyp.tree@tree
tree
hyp.tree
tree
unadjp
tree
hyp.tree
hyp.tree
adjust
children.p.vals
hyp.tree@p.vals[children, 'unadjp']
hyp.tree@pvals[children, ]
hyp.tree@p.vals[children, ]
hyp.tree@p.vals[children, ]
rejected
rejected
edgelist
edgelist
root
root
root
edgelist
root
children
root
root
children
colnames(edgelist)
parent
which(edgelist$parent == root)
edgelist$parent
edgelist
colnames(edgelist)
edgelist$parent
root
children
head(edgelist)
edgelist
edgelist
edgelist
edgelist
children
        children.p.vals <- hyp.tree@p.vals[children, 'unadjp']
children.p.vals
hyp.tree@p.vals
edgelist
children
children.p.vals
children
children
children.p.vals
children
children.p.vals
adjust
rejected
rejected
rejected
child <- rejected[1]
child
subcomp
subtree
subtree.igraph
subtree@tree
children
V(tree)$hyp.names %in% children
rejected
V(subtree.igraph)
V(subtree.igraph)$hyp.names
hyp.tree@p.vals[V(subtree.igraph), ]
hyp.tree@p.vals
hFDR.internal(hyp.tree)
hyp.tree
tree <- hyp.tree@tree
tree
rejected
alpha
children
hyp.tree@p.vals
children
children.p.vals
rejected
children.p.vals$adjp
children.p.vals
rejected
rejected
child <- rejected[1]
subtree@p.vals
hyp.tree@p.vals
subtree
hyp.tree <- subtree
subtree
tree
rejected
subcomp
subtree@p.vals
tree
hyp.tree
subtree
tree
subtree
tree
subtree
child
subtree@p.vals
hyp.tree
tree <- hyp.tree@tree
tree
unadjp
tree <- as.matrix(get.adjacency(as.igraph(rtree(25)), sparse = FALSE))
tree
tree
hFDR.internal(hyp.tree)
hFDR.internal(hyp.tree)
hFDR.internal(hyp.tree)
hFDR.internal(hyp.tree)
subtree
subtree.igraph
unadjp <- unadj.p.values
alpha <- 0.05
tree <- as.matrix(get.adjacency(as.igraph(rtree(25)), sparse = FALSE))
library('multtest')
rejected
unadjp
rejected
children
edgelist
child <- rejected[1]
child
subcomp
tree
V(subcomp)
V(subtree.igraph)
subtree
hyp.tree@p.vals
V(subtree.igraph)
subtree
subtree
as.character(V(subtree.igraph))
V(subtree.igraph)
names(V(subtree.igraph))
str(V(subtree.igraph))
as.character(V(subtree.igraph))
as.factor(V(subtree.igraph))
V(subtree.igraph)
summary(V(subtree.igraph))
V(subtree.igraph)
class(V(subtree.igraph))
class(V(subtree.igraph)) <- vector()
class(V(subtree.igraph)) <- list()
class(V(subtree.igraph)) <- list
V(subtree.igraph)
get.vertex.attribute(subtree.igraph)
get.vertex.attribute(subtree.igraph, 'name')
hyp.tree
hFDR.internal(hyp.tree)
plot(tree)
plot(tree)
alpha
plot(tree)
plot(graph.adjacency(hyp.tree@tree))
plot(hyp.tree@tree)
plot(graph.adjacency(hyp.tree@tree))
hFDR.internal(hyp.tree)
root
hyp.tree
hyp.tree
BuildEdgelist
root
el.root
unadjp
tree
example(hFDR.adjust)
library('structSSI')
example(hFDR.adjust)
vector(NA, 10)
vector(NA)
vector(10)
vector(length = 10)
vector(mode = NA, length = 10)
vector(mode = F, length = 10)
vector( length = 10)
vector(mode = F, length = 10)
vector(length = 10)
SignificanceStars(hyp.tree@p.vals[, 'adjp'], alpha)
hyp.tree@p.vals[, 'adjp']
hyp.tree@p.vals[, 'adjp']
hyp.tree@p.vals[, 'adjp']
SignificanceStars(alpha, hyp.tree@p.vals[, 'adjp'])
result[, 3]
result@p.vals
result@p.vals[, 4]
result@p.vals[, 3]
result@p.vals[, 2]
tree
names(unadjp)
names(unadjp) <- NULL
p.vals
unadjp
tree
hyp.tree.unadjusted
p.vals
colnames(p.vals)
root
tree
unadjp
names(unadjp) <- NULL
unadjp
tree
rownames(tree) == names(unadjp)
tree
rownames(tree)[1:2] <- c(2, 1)
colnames(tree)[1:2] <- c(2, 1)
tree
rownames(tree) != names(unadjp)
!names(unadjp) %in% rownames(tree)
!(names(unadjp) %in% rownames(tree))
tree
tree
hFDR.adjust(unadjp, tree)
plotUnadjustedHypothesesTree(hyp.tree)
library('classIntervals')
library('classInt')
plotUnadjustedHypothesesTree(hyp.tree)
library('RColorBrewer')
plotUnadjustedHypothesesTree(hyp.tree)
which(hyp.tree@p.val[, 'adjp'] < alpha)
which(hyp.tree@p.vals[, 'adjp'] < alpha)
rownames(hyp.tree@p.vals)[which(hyp.tree@p.vals[, 'adjp'] < alpha)]
hyp.tree@p.vals[, 'adjp']
hyp.tree <- hFDR.adjust(unadjp, tree)
hyp.tree
hyp.tree <- hFDR.adjust(unadjp, tree)
hyp.tree
plotAdjustedHypothesesTree(hyp.tree)
plotAdjustedHypothesesTree(hyp.tree)
adj.pval
nTested
rejeced.hyp
nAttrs
is.na(hyp.tree@p.vals[, 'adjp'])
nAttrs$fillcolor
nAttrs$fillcolor
nAttrs$fillcolor
n.rejected.classes
cl2
pval.rejected.class
pvals.palette.green
colCategory.green
pval.levels
pval.levels
pval.levels
cur.level
pval.levels[cur.level]
pval.levels
pval.levels
pvals.cut[pvals.levels[1]]
pvals.cut[pvals.levels[2]]
pvals.levels[2]
pvals.cut
pvals.cut
pval.levels
pvals.cut
plotAdjustedHypothesesTree(hyp.tree)
display.brewer.pal(10)
display.brewer.all(10)
plotAdjustedHypothesesTree(hyp.tree)
plotAdjustedHypothesesTree(hyp.tree)
pvals.cut
hyp.tree@p.vals[, 'adjp']
plotAdjustedHypothesesTree(hyp.tree)
warnings()
plotAdjustedHypothesesTree(hyp.tree)
install.packages('scales')
plotAdjustedHypothesesTree(hyp.tree)
hyp.tree
library('scales')
example(brewer_pal)
rejected
brewer_pal(pal = "Greens")
brewer_pal(pal = "Greens")(5)
pvals.cut.reject
pvals.cut.reject
rejected
pvals.cut.accept
rejected
pvals.cut.reject
pvals.cut.accept
pvals.cut.accept
pvals.cut.reject
install.packages('ggdendro')
library(ggdendro)
examples(ggdendrogram)
example(ggdendrogram)
HypTreeJSON(hyp.tree)
hyp.tree@tree
tree
unadjp
tree
 ListTreePval(tree)
HypTreeJSON(hyp.tree, file = 'hyp_tree_1225.JSON')
getwd()
setwd('/home/krsankaran/Documents/Research/')
HypTreeJSON(hyp.tree, type = 'unadjusted', file = 'hyp_tree_unadjusted.JSON')
xy = paste(unlist(lapply(res, function(z) {
  xs = paste(round(z$x, 3), collapse = ",")
  ys = paste(round(z$y, 3), collapse = ",")
  sprintf("{\n  \"x\": [%s],\n  \"y\": [%s]\n}", xs, ys)
})), collapse = ", \n")
res = contourLines(volcano)
str(res[1:2])  # first two elements of the list
res
xy = paste(unlist(lapply(res, function(z) {
  xs = paste(round(z$x, 3), collapse = ",")
  ys = paste(round(z$y, 3), collapse = ",")
  sprintf("{\n  \"x\": [%s],\n  \"y\": [%s]\n}", xs, ys)
})), collapse = ", \n")
cat("<script>", sprintf("var data = [%s]", xy), "</script>", sep = "\n")
install.packages('googleVis')
library(ggoglVis)
library('googleVis')
?googleVis
demo(googleVis)
googleVis::plot.gvis
?startDynamicHelp
startDynamicHelp
get("httpdPort", envir = environment(startDynamicHelp))
get("httpdPort")
?get
?browsUrl
?browseURL
)
sprintf
?sprintf
browseURL(html)
html
browsURL(html)
browseURL(html)
html
?sink
a
HypTreeJSON
sink()
hyp.tree
show(hyp.tree)
?sink
sink()
hyp.tree
library('R2Html')
install.packages('R2HTML')
library('R2Html')
library('R2HTML')
hyp.tree
